public class Reverse_LinkedList {
        public static class Node{
            int data;
            Node next;
            public Node(int data){
                this.data = data;
                this.next = null;
            }
        }
        public static Node head;
        public static Node tail;
    
        public void addFirst(int data){
            // step 1 = create new node
            Node newNode = new Node(data);
            if(head == null){
                head = tail = newNode;
                return;
            }
            // step 2 = newNode.next = head
            newNode.next = head;
            // step 3 = head = newNode
            head = newNode;
        }
        public void addLast(int data){
          Node newNode = new Node(data);
          if(head == null){
            head = tail = newNode;
            return;
          }
          newNode.next = tail;
          tail = newNode;
        }
        public void print(){
            if(head == null){
                System.out.println("LL is empty");
                return;
            }
            Node temp = head;
            while(temp != null){
                System.out.print(temp.data + " ");
                temp = temp.next;
            }
            System.out.println();
        }
        public int helper(Node head, int key){
            if(head == null){
                return -1;
            }
            if(head.data == key){
                return 0;
            }
            int idx = helper(head.next, key);
            if(idx == -1){
                return -1;
            }
            return idx+1;
        }
        public int recSearch(int key){
           return helper(head, key);
        }
    // Reverse a LinkedList -------------------
        public void reverse(){
            Node prev = null;
            Node curr = tail = head;
            Node next;

            while(curr != null){
                next = curr.next;
                curr.next = prev;
                prev = curr;
                curr = next;
            }
            head = prev;
        }
    
        public static void main(String args[]){
            LinkedList ll = new LinkedList();
            ll.addFirst(2);
            ll.addFirst(1);
            ll.addLast(4);
            ll.addLast(5);
            ll.add(2,3);
            ll.print();
            ll.reverse();
            ll.print();
        }
    }
    // TC = o(n)
     
    
    
    
    



